type PropertyValue = string | number;
type CSSProperties = keyof CSSStyleDeclaration;
type StyleObject = Partial<Record<CSSProperties, PropertyValue>>;
type Pseudo = `:${string}`;
type MediaQuery = `@media ${string}`;
type CSSVariablesObject = Record<`--${string}`, string>;
type Style = Partial<Record<string, any> & Partial<{
    '.'?: string | string[];
    '--'?: CSSVariablesObject;
}> & Record<Pseudo | MediaQuery, StyleObject> & StyleObject>;
type ParentClass = `.${string}`;
type ClassSet = Set<string>;
type Styles<K extends string> = Partial<Record<K, Style | Record<ParentClass, Record<K, Style>>>>;
type ScopedStyles<K extends string> = Record<K, ClassSet>;

declare function cx(...args: any[]): string;

type S<K extends string> = Exclude<K, ParentClass>;
type createSheetReturn = {
    create: <K extends string>(styles: Styles<K> & Record<ParentClass, Styles<K>>) => ScopedStyles<S<K>>;
    getStyle: () => string;
    isApplied: () => boolean;
};
declare function createSheet(name: string): createSheetReturn;

export { createSheet, cx };
